// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
insert into token (issuer, subject, audience, expires_at, not_before, issued_at)
values ($1, $2, $3, $4, $5, $6)
returning id, issuer, subject, audience, expires_at, not_before, issued_at
`

type CreateTokenParams struct {
	Issuer    string
	Subject   string
	Audience  string
	ExpiresAt time.Time
	NotBefore time.Time
	IssuedAt  time.Time
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.Issuer,
		arg.Subject,
		arg.Audience,
		arg.ExpiresAt,
		arg.NotBefore,
		arg.IssuedAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Issuer,
		&i.Subject,
		&i.Audience,
		&i.ExpiresAt,
		&i.NotBefore,
		&i.IssuedAt,
	)
	return i, err
}

const disallowToken = `-- name: DisallowToken :exec
insert into token_disallow_list (token_id) values ($1)
`

func (q *Queries) DisallowToken(ctx context.Context, tokenID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disallowToken, tokenID)
	return err
}
