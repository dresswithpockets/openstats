// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package query

import (
	"context"
)

// iteratorForAddUserSlugHistories implements pgx.CopyFromSource.
type iteratorForAddUserSlugHistories struct {
	rows                 []AddUserSlugHistoriesParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddUserSlugHistories) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddUserSlugHistories) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].UserID,
		r.rows[0].Slug,
	}, nil
}

func (r iteratorForAddUserSlugHistories) Err() error {
	return nil
}

func (q *Queries) AddUserSlugHistories(ctx context.Context, arg []AddUserSlugHistoriesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"user_slug_history"}, []string{"user_id", "slug"}, &iteratorForAddUserSlugHistories{rows: arg})
}

// iteratorForAddUsers implements pgx.CopyFromSource.
type iteratorForAddUsers struct {
	rows                 []string
	skippedFirstNextCall bool
}

func (r *iteratorForAddUsers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddUsers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0],
	}, nil
}

func (r iteratorForAddUsers) Err() error {
	return nil
}

func (q *Queries) AddUsers(ctx context.Context, slug []string) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"users"}, []string{"slug"}, &iteratorForAddUsers{rows: slug})
}
