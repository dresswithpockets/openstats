// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: developer.sql

package query

import (
	"context"
)

const allDevelopers = `-- name: AllDevelopers :many
select id, created_at, updated_at, deleted_at, slug
from developer
`

func (q *Queries) AllDevelopers(ctx context.Context) ([]Developer, error) {
	rows, err := q.db.QueryContext(ctx, allDevelopers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Developer
	for rows.Next() {
		var i Developer
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDeveloperBySlug = `-- name: FindDeveloperBySlug :one
select id, created_at, updated_at, deleted_at, slug
from developer
where slug = ?
limit 1
`

func (q *Queries) FindDeveloperBySlug(ctx context.Context, slug string) (Developer, error) {
	row := q.db.QueryRowContext(ctx, findDeveloperBySlug, slug)
	var i Developer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Slug,
	)
	return i, err
}

const getDeveloperGames = `-- name: GetDeveloperGames :many
select game.slug
from game
where developer_id = ?
`

func (q *Queries) GetDeveloperGames(ctx context.Context, developerID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getDeveloperGames, developerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var slug string
		if err := rows.Scan(&slug); err != nil {
			return nil, err
		}
		items = append(items, slug)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeveloperMembers = `-- name: GetDeveloperMembers :many
select user.slug
from user
     join developer_member on user.id = developer_member.user_id
where developer_member.developer_id = ?
`

func (q *Queries) GetDeveloperMembers(ctx context.Context, developerID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getDeveloperMembers, developerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var slug string
		if err := rows.Scan(&slug); err != nil {
			return nil, err
		}
		items = append(items, slug)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
