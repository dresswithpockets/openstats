// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const allGames = `-- name: AllGames :many
select game.id, game.created_at, game.updated_at, game.deleted_at, game.developer_id, game.slug, developer.slug as developer_slug
from game
     join developer on game.developer_id = developer.id
`

type AllGamesRow struct {
	ID            int64
	CreatedAt     time.Time
	UpdatedAt     time.Time
	DeletedAt     sql.NullTime
	DeveloperID   int64
	Slug          string
	DeveloperSlug string
}

func (q *Queries) AllGames(ctx context.Context) ([]AllGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, allGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllGamesRow
	for rows.Next() {
		var i AllGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.DeveloperID,
			&i.Slug,
			&i.DeveloperSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findGameBySlug = `-- name: FindGameBySlug :one
select game.id, game.created_at, game.updated_at, game.deleted_at, game.developer_id, game.slug
from game
     join developer on game.developer_id = developer.id
where game.slug = ? and developer.slug = ?2
`

type FindGameBySlugParams struct {
	Slug    string
	DevSlug string
}

func (q *Queries) FindGameBySlug(ctx context.Context, arg FindGameBySlugParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, findGameBySlug, arg.Slug, arg.DevSlug)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.DeveloperID,
		&i.Slug,
	)
	return i, err
}

const getGameAchievements = `-- name: GetGameAchievements :many
select id, created_at, updated_at, deleted_at, game_id, slug, name, description, progress_requirement
from achievement
where game_id = ?
`

func (q *Queries) GetGameAchievements(ctx context.Context, gameID int64) ([]Achievement, error) {
	rows, err := q.db.QueryContext(ctx, getGameAchievements, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Achievement
	for rows.Next() {
		var i Achievement
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.GameID,
			&i.Slug,
			&i.Name,
			&i.Description,
			&i.ProgressRequirement,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
